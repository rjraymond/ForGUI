{"ast":null,"code":"const sleep = delay => new Promise(resolve => setTimeout(resolve, delay));\nfunction GetPrediction(model, sample) {\n  if (model == null) return -1;\n  if (sample == null) return -2;\n  const repeatedGreetings = async () => {\n    await sleep(1000);\n    console.log(\"moar\");\n  };\n}\n_c = GetPrediction;\nconsole.log(\"Getting Prediction!\");\nconsole.log(GetPrediction(1, 1));\nconsole.log(\"Done\");\nvar _c;\n$RefreshReg$(_c, \"GetPrediction\");","map":{"version":3,"names":["sleep","delay","Promise","resolve","setTimeout","GetPrediction","model","sample","repeatedGreetings","console","log"],"sources":["/home/ryan/Git/ForGUI/src/GetPrediction.js"],"sourcesContent":["const sleep = (delay) => new Promise ( (resolve) => setTimeout (resolve, delay));\nfunction GetPrediction (model, sample)\n{\n\tif (model == null)\n\t\treturn -1;\n\tif (sample == null)\n\t\treturn -2;\n\t\n\tconst repeatedGreetings = async () => {\n\t\tawait sleep (1000)\n\t\tconsole.log (\"moar\")\n\t}\n}\n\nconsole.log (\"Getting Prediction!\");\nconsole.log (GetPrediction (1, 1));\nconsole.log (\"Done\");\n"],"mappings":"AAAA,MAAMA,KAAK,GAAIC,KAAK,IAAK,IAAIC,OAAO,CAAIC,OAAO,IAAKC,UAAU,CAAED,OAAO,EAAEF,KAAK,CAAC,CAAC;AAChF,SAASI,aAAa,CAAEC,KAAK,EAAEC,MAAM,EACrC;EACC,IAAID,KAAK,IAAI,IAAI,EAChB,OAAO,CAAC,CAAC;EACV,IAAIC,MAAM,IAAI,IAAI,EACjB,OAAO,CAAC,CAAC;EAEV,MAAMC,iBAAiB,GAAG,YAAY;IACrC,MAAMR,KAAK,CAAE,IAAI,CAAC;IAClBS,OAAO,CAACC,GAAG,CAAE,MAAM,CAAC;EACrB,CAAC;AACF;AAAC,KAXQL,aAAa;AAatBI,OAAO,CAACC,GAAG,CAAE,qBAAqB,CAAC;AACnCD,OAAO,CAACC,GAAG,CAAEL,aAAa,CAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAClCI,OAAO,CAACC,GAAG,CAAE,MAAM,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}