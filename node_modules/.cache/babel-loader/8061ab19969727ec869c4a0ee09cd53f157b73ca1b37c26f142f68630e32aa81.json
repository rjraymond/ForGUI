{"ast":null,"code":"function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nexport function GetPrediction(model, sample) {\n  if (model == null) return -1;\n  if (sample == null) return -2;\n  return (async () => {\n    setTimeout(() => {\n      console.log(\"World!\");\n    }, 500);\n    return Math.round(Math.random() * 100) / 100;\n  })();\n}\n_c = GetPrediction;\nvar _c;\n$RefreshReg$(_c, \"GetPrediction\");","map":{"version":3,"names":["sleep","ms","Promise","resolve","setTimeout","GetPrediction","model","sample","console","log","Math","round","random"],"sources":["/home/ryan/Git/ForGUI/src/GetPrediction.js"],"sourcesContent":["function sleep (ms) {\n\treturn new Promise (resolve => setTimeout (resolve, ms));\n}\nexport function GetPrediction (model, sample)\n{\n\tif (model == null)\n\t\treturn -1;\n\tif (sample == null)\n\t\treturn -2;\n\treturn (async () => {\n\t\tsetTimeout(() => {  console.log(\"World!\"); }, 500);\n\t\treturn Math.round (Math.random() * 100) / 100;\n\t}) ();\n}\n\n"],"mappings":"AAAA,SAASA,KAAK,CAAEC,EAAE,EAAE;EACnB,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAIC,UAAU,CAAED,OAAO,EAAEF,EAAE,CAAC,CAAC;AACzD;AACA,OAAO,SAASI,aAAa,CAAEC,KAAK,EAAEC,MAAM,EAC5C;EACC,IAAID,KAAK,IAAI,IAAI,EAChB,OAAO,CAAC,CAAC;EACV,IAAIC,MAAM,IAAI,IAAI,EACjB,OAAO,CAAC,CAAC;EACV,OAAO,CAAC,YAAY;IACnBH,UAAU,CAAC,MAAM;MAAGI,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IAAE,CAAC,EAAE,GAAG,CAAC;IAClD,OAAOC,IAAI,CAACC,KAAK,CAAED,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG;EAC9C,CAAC,GAAI;AACN;AAAC,KAVeP,aAAa;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}