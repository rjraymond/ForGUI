{"ast":null,"code":"var _jsxFileName = \"/home/ryan/Git/ForGUI/src/Application.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { GetModelList } from \"./GetModelList.js\";\nimport { GetPrediction } from \"./GetPrediction.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class Application extends React.Component {\n  constructor(props) {\n    super(props);\n    this.Submit = event => {\n      event.preventDefault();\n      if (!this.state.sample || this.state.prediction_in_progress) return;\n      this.setState({\n        prediction_in_progress: true\n      });\n      this.setState({\n        prediction: GetPrediction(\"1\", \"2\")\n      });\n      this.setState({\n        prediction_in_progress: false\n      });\n    };\n    this.FileUpload = event => {\n      if (!event.target.files) return;\n      if (!event.target.files[0]) alert(\"No file!\");\n      this.AsyncFileUpload(event.target.files[0]);\n      /* Handle file-upload logic here. */\n    };\n    this.state = {};\n    this.state.models = GetModelList();\n    this.state.model = this.state.models[0];\n    this.state.sample = null;\n    this.state.prediction_in_progress = false;\n    this.state.prediction = -1;\n  }\n  async AsyncPrediction() {\n    let promise = new Promise(resolve => {\n      resolve(GetPrediction());\n    });\n    let prediction = await promise;\n    this.setState({\n      prediction: prediction,\n      prediction_in_progress: false\n    });\n  }\n  async AsyncFileUpload(file) {\n    var post = new XMLHttpRequest();\n    post.open(\"POST\", \"http://localhost:8000/UploadFile.php\");\n    post.setRequestHeader(\"X-File-Name\", file.name);\n    post.send(file);\n    this.setState({\n      sample: file\n    });\n    alert(\"sent \" + file.name + \", size: \" + file.size);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        method: \"POST\",\n        enctype: \"multipart/form-data\",\n        onSubmit: this.Submit,\n        style: {\n          margin: \"auto\",\n          width: \"max-content\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"UploadSample\",\n            children: \" Upload Sample: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: this.FileUpload,\n            type: \"file\",\n            id: \"UploadSample\",\n            name: \"UploadSample\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"SelectModel\",\n            children: \" Select Model: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"SelectModel\",\n            onChange: this.ModelChanged,\n            children: this.state.models.sort().map((name, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: name,\n              children: name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 12\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Analyze\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: \"auto\",\n          width: \"max-content\"\n        },\n        children: [this.state.sample == null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: \" Please upload a sample \"\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: \" \"\n        }, void 0, false), this.state.model == null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: \" Please select a model \"\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: \" \"\n        }, void 0, false), this.state.prediction_in_progress ? /*#__PURE__*/_jsxDEV(LoadingAnimation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 6\n        }, this) : this.state.prediction >= 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\" We estimate a \", this.state.prediction, \"% chance that \", this.state.sample.name, \" is a deepfake. \"]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: \" \"\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n}\nclass LoadingAnimation extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"LoadingAnimation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 4\n    }, this);\n  }\n}","map":{"version":3,"names":["React","ReactDOM","GetModelList","GetPrediction","Application","Component","constructor","props","Submit","event","preventDefault","state","sample","prediction_in_progress","setState","prediction","FileUpload","target","files","alert","AsyncFileUpload","models","model","AsyncPrediction","promise","Promise","resolve","file","post","XMLHttpRequest","open","setRequestHeader","name","send","size","render","margin","width","ModelChanged","sort","map","index","LoadingAnimation"],"sources":["/home/ryan/Git/ForGUI/src/Application.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { GetModelList } from \"./GetModelList.js\";\nimport { GetPrediction } from \"./GetPrediction.js\";\n\nexport class Application extends React.Component {\n  constructor (props)\n\t{\n\t\tsuper (props);\n\t\tthis.state = {}\n\t\tthis.state.models = GetModelList ();\n\t\tthis.state.model = this.state.models[0];\n\t\tthis.state.sample = null;\n\t\tthis.state.prediction_in_progress = false;\n\t\tthis.state.prediction = -1;\n\t}\n\tasync AsyncPrediction ()\n\t{\n\t\tlet promise = new Promise ((resolve) => {\n\t\t\tresolve (GetPrediction ());\n\t\t\t});\n\t\tlet prediction = await promise;\n\t\tthis.setState ({prediction: prediction, prediction_in_progress: false});\n\t}\n\tasync AsyncFileUpload (file)\n\t{\n\t\tvar post = new XMLHttpRequest ();\n\t\tpost.open (\"POST\", \"http://localhost:8000/UploadFile.php\")\n\t\tpost.setRequestHeader (\"X-File-Name\", file.name);\n\t\tpost.send (file);\n\t\tthis.setState ({sample: file});\n\t\talert (\"sent \" + file.name + \", size: \" + file.size);\n\t}\n\tSubmit = (event) => \n\t{\n\t\tevent.preventDefault ();\n\t\tif (!this.state.sample || this.state.prediction_in_progress)\n\t\t\treturn;\n\t\tthis.setState ({prediction_in_progress: true});\n\t\tthis.setState ({prediction: GetPrediction(\"1\", \"2\") })\n\t\tthis.setState ({prediction_in_progress: false});\n\t}\n\tFileUpload = (event) => {\n\t\tif (!event.target.files)\n\t\t\treturn;\n\t\tif (! event.target.files[0])\n\t\t\talert (\"No file!\");\n\t\tthis.AsyncFileUpload (event.target.files[0]);\n\t\t/* Handle file-upload logic here. */\n\t\t\n\t}\n\trender () {\n    return (\n      <div>\n\t\t\t\t<form method = \"POST\" enctype=\"multipart/form-data\"  onSubmit = {this.Submit} style = {{margin: \"auto\", width: \"max-content\"}}>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label htmlFor = \"UploadSample\"> Upload Sample: </label>\n\t\t\t\t\t\t<input onChange = {this.FileUpload} type = \"file\" id = \"UploadSample\" name = \"UploadSample\"/>\n\t\t\t\t\t</div><>\n\t\t\t\t\t<label htmlFor = \"SelectModel\"> Select Model: </label>\n      \t\t<select id = \"SelectModel\" onChange = {this.ModelChanged}>\n      \t\t\t{this.state.models.sort ().map ((name, index) => (\n        \t\t\t<option value = {name} key = {index}>\n          \t{name}\n        \t\t</option>\n      \t\t\t))}\n      \t\t</select></>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input type = \"submit\" value = \"Analyze\" />\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t\t<div style = {{margin: \"auto\", width: \"max-content\"}}>\n\t\t\t\t{ this.state.sample == null ?\n\t\t\t\t\t<> Please upload a sample </> :\n\t\t\t\t\t<> </> }\n\t\t\t\t{ this.state.model == null ?\n\t\t\t\t\t<> Please select a model </> :\n\t\t\t\t\t<> </> }\n\t\t\t\t{\n\t\t\t\tthis.state.prediction_in_progress ?\n\t\t\t\t\t<LoadingAnimation /> :\n\t\t\t\t\t(this.state.prediction >= 0 ?\n\t\t\t\t\t\t<> We estimate a {this.state.prediction}% chance that {this.state.sample.name} is a deepfake. </> :\n\t\t\t\t\t\t<> </>)\n\t\t\t\t}\n\t\t\t\t</div>\n      </div>\n    );\n  }\n}\n\nclass LoadingAnimation extends React.Component {\n\trender () {\n\t\treturn (\n\t\t\t<span className = \"LoadingAnimation\"></span>\n\t\t);\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}